#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);  // Adjust I2C address if needed (0x27 or 0x3F)
Servo gateServo;

const int IR_ENTRY = 2;  // Use const for constants
const int IR_EXIT = 4;
int SLOT_COUNT = 4;

bool entryFlag = false;  // Use bool for flags
bool exitFlag = false;

void setup() {
  lcd.init();
  lcd.backlight();

  pinMode(IR_ENTRY, INPUT);
  pinMode(IR_EXIT, INPUT);

  gateServo.attach(3);
  gateServo.write(90); // Gate closed position

  lcd.setCursor(0, 0);
  lcd.print(" SMART PARKING ");
  lcd.setCursor(0, 1);
  lcd.print("   SYSTEM READY  ");
  delay(2000);
  lcd.clear();
}

void loop() {
  // Entry Sensor Trigger
  if (digitalRead(IR_ENTRY) == LOW && !entryFlag) {
    entryFlag = true;
    if (SLOT_COUNT > 0) {
      SLOT_COUNT--;
      openGate("Car Entered");
    } else {
      displayFullMessage();
    }
  }

  // Exit Sensor Trigger
  if (digitalRead(IR_EXIT) == LOW && !exitFlag) {
    exitFlag = true;
    SLOT_COUNT++;
    openGate("Car Exited");
  }

  // Reset flags when no car
  if (digitalRead(IR_ENTRY) == HIGH) {
    entryFlag = false;
  }
  if (digitalRead(IR_EXIT) == HIGH) {
    exitFlag = false;
  }

  // Show available slots
  displayAvailableSlots();
}

// Function to open gate and display message
void openGate(String message) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(message);
  gateServo.write(0);     // Open gate
  delay(3000);
  gateServo.write(90);    // Close gate
  delay(1000);
  lcd.clear();
}

// Function to display parking full message
void displayFullMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SORRY :( ");
  lcd.setCursor(0, 1);
  lcd.print("Parking Full");
  delay(3000);
}

// Function to display available slots
void displayAvailableSlots() {
  lcd.setCursor(0, 0);
  lcd.print("WELCOME!");
  lcd.setCursor(0, 1);
  lcd.print("Slots Left: ");
  lcd.print(SLOT_COUNT);
  delay(500);
}

